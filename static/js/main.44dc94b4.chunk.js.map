{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PLACES","name","zip","WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","_this2","props","fetch","then","res","json","console","log","setState","react_default","a","createElement","Spinner","animation","variant","weather","iconUrl","icon","main","src","temp","temp_max","temp_min","wind","speed","Component","App","_this3","activePlace","_this4","className","Navbar","bg","expand","Brand","href","Container","Row","Col","md","sm","Nav","activeKey","onSelect","index","map","place","Item","key","Link","to","eventKey","App_WeatherDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.44dc94b4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Navbar, Nav, Col, Container, Row, NavItem, Spinner } from 'react-bootstrap';\n//import 'bootstrap/dist/css/bootstrap.css';\nimport 'bootswatch/dist/journal/bootstrap.css';\n\nconst PLACES = [\n  { name: \"Round Rock\", zip: \"78681\" },\n  { name: \"San Jose\", zip: \"95112\" }\n];\n\nclass WeatherDisplay extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      weatherData: null\n    };\n  }\n\n  componentDidMount() {\n    const zip = this.props.zip;\n    const URL = \"https://api.openweathermap.org/data/2.5/weather?zip=\" + zip + \"&appid=73f380995f6df11f9d0f897ce72aecbf&units=imperial\"\n\n    fetch(URL).then(res => res.json()).then(json => {\n      console.log(json)\n      this.setState({ weatherData: json })\n    })\n  }\n\n  render() {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return <Spinner animation=\"grow\" variant=\"success\" />;\n    const weather = weatherData.weather[0];\n    const iconUrl = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\";\n    if (!weatherData) return <Spinner animation=\"grow\" variant=\"success\" />;\n    return (\n      <div>\n        <h1>\n          {weather.main} in {weatherData.name}\n          <img src={iconUrl} />\n        </h1>\n        <p>Current: {weatherData.main.temp}°</p>\n        <p>High: {weatherData.main.temp_max}°</p>\n        <p>Low: {weatherData.main.temp_min}°</p>\n        <p>Wind Speed: {weatherData.wind.speed} mi/hr</p>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activePlace: 0,\n    }\n  }\n\n  render() {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">React Simple Weather App</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row className=\"mt-5\">\n            <Col md={4} sm={4}>\n              <h3>Select a city</h3>\n              <Nav\n                variant=\"pills\"\n                className=\"flex-column\"\n                activeKey={activePlace}\n                onSelect={index => {\n                  this.setState({ activePlace: index });\n                }}\n              >\n                {PLACES.map((place, index) => (\n                  <Nav.Item key={index} className=\"header-nav-item\">\n                    <Nav.Link to={index} eventKey={index}>\n                      {place.name}\n                    </Nav.Link>\n                  </Nav.Item>\n                ))}\n              </Nav>\n            </Col>\n            <Col md={8} sm={8}>\n              <WeatherDisplay key={activePlace} zip={PLACES[activePlace].zip} />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}